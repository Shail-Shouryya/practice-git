This file is to be present in all branches.

The second line of text comes after a line break.
Added this line in branch B, but there is still a line break between the first line and the line right before this line at the time I modified this.
The third line of text also comes after a line break.

The fourth line of text comes after 3 line breaks.
This is the fifth line.
This is the sixth line.
This is the seventh line.
Added this line after deleting 2 line breaks between the third and fourth line and adding a newline after this line.

Added this line after adding a newline after "Added this line after deleting 2 line breaks between the third and fourth line and adding a newline after this line," and added a newline after this.
Added this line while:
Note: checking out 'HEAD~2'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>
Merge conflict when attempting to git merge detached into master, needed to fix
Adding line after "git checkout -b <new-branch-name>" but before message about detached.
So the above overwrote changes I made before going into detached mode, messed something up.

Rollback point

Need to revert commits backwards from most recent commit to oldest commit to avoid conflicts in file from reverting things (due to reverting to an older point having things that a more recent commit doesn't have, so revert is "undoing" more than "1 commit")

Adding lines in other branch that
will be included in a PR
and a merge request will be made, but the PR will be closed without merging and then the commits will be cherry picked from the PR into master directly

Adding a line that will be pushed to branch A and merged from a PR, but then the PR will be reverted. The purpose of this is to see how reverting a commit affects commits and if all commits that were merged will also be reverted by reverting just the PR (and not individual commits from the PR); also a test to see if the same PR can be reopened after since the branch is usually deleted after merging a PR.
